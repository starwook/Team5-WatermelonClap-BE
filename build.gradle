plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.2'
	id 'io.spring.dependency-management' version '1.1.5'
	id "org.asciidoctor.jvm.convert" version "3.3.2"
	id 'com.epages.restdocs-api-spec' version '0.18.2'
	id 'org.hidetake.swagger.generator' version '2.19.2'
	id 'jacoco'
}

group = 'com.watermelon'
version = '0.0.1-SNAPSHOT'

bootJar {
	enabled = false
}
jar {
	enabled = true
}

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {

	swaggerUI 'org.webjars:swagger-ui:3.52.5'
	swaggerCodegen 'io.swagger.codegen.v3:swagger-codegen-cli:3.0.47'  // or Swagger Codegen V3

}

subprojects {

	apply plugin: 'java'
	apply plugin: 'org.springframework.boot'
	apply plugin: 'io.spring.dependency-management'
	apply plugin: "org.asciidoctor.jvm.convert"
	apply plugin: 'com.epages.restdocs-api-spec'
	apply plugin: 'org.hidetake.swagger.generator'
	apply plugin: 'jacoco'

	group = 'com.watermelon'
	version = '0.0.1-SNAPSHOT'

	java {
		toolchain {
			languageVersion = JavaLanguageVersion.of(17)
		}
	}

	configurations {
		compileOnly {
			extendsFrom annotationProcessor
		}
	}

	repositories {
		mavenCentral()
	}

	dependencies {
		implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
		//firebase
		implementation 'com.google.firebase:firebase-admin:9.2.0'

		compileOnly 'org.projectlombok:lombok'
		runtimeOnly 'com.h2database:h2'
		annotationProcessor 'org.projectlombok:lombok'
		testImplementation 'org.springframework.boot:spring-boot-starter-test'
		testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
		testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
		testImplementation 'io.findify:s3mock_2.13:0.2.6'

		implementation 'org.springframework.boot:spring-boot-starter-validation'
		testCompileOnly 'org.projectlombok:lombok'
		testAnnotationProcessor 'org.projectlombok:lombok'

		//rest-docs -> openApi
		testImplementation 'com.epages:restdocs-api-spec-mockmvc:0.18.2' //2.2

		//db

		runtimeOnly 'com.mysql:mysql-connector-j'
		implementation 'org.springframework.cloud:spring-cloud-starter-aws:2.2.6.RELEASE'


		implementation 'org.springframework.boot:spring-boot-starter-actuator'
		/**
		 * for Caching
		 */

		implementation 'org.springframework.boot:spring-boot-starter-cache'
		implementation 'com.github.ben-manes.caffeine:caffeine'

		ext {
			JJWT_VERSION = "0.12.3"
		}

		implementation "io.jsonwebtoken:jjwt-api:${JJWT_VERSION}"
		runtimeOnly "io.jsonwebtoken:jjwt-gson:${JJWT_VERSION}"
		runtimeOnly "io.jsonwebtoken:jjwt-impl:${JJWT_VERSION}"
	}

	jacocoTestReport {
		dependsOn test // tests are required to run before generating the report
		reports {
			xml.required = true
			csv.required = false
			html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
		}

		afterEvaluate {
			classDirectories.setFrom(
					files(classDirectories.files.collect {
						fileTree(dir: it, excludes: [
								'**/*Application*',
								'**/*Exception*',
								'**/dto/**',
						])
					})
			)
		}
	}

}

task mergeApiSpecs(type: Copy) {
	// Define the destination directory for the merged files
	def destinationDir = "merged-api-spec"

	// Create the destination directory if it doesn't exist
	doFirst {
		mkdir destinationDir
	}

	duplicatesStrategy = DuplicatesStrategy.EXCLUDE

	// Copy files from lottery and order modules
	from(project(":lottery").file("build/generated-snippets")) {
		include '**/*' // Include all files
	}
	from(project(":order").file("build/generated-snippets")) {
		include '**/*' // Include all files
	}

	// Copy files to the destination directory
	into destinationDir
}

task copyApiSpecsToRoot {
	dependsOn ':lottery:assemble', ':order:assemble'
	dependsOn mergeApiSpecs
}

//OpenAPI Spec 지정
openapi3 {
	title = 'Watermelon REST API'
	description = 'Watermelon API 문서입니다.'
	version = '0.1.0'
	servers = [ { url = 'https://softeer.store' } ]
	format = 'yaml'
	contact = {
		name = 'watermelon'
		email = 'watermelon@gmail.com'
	}
	outputDirectory = 'openapi3'
	snippetsDirectory = 'merged-api-spec'
}

tasks.register('customGenerateSwaggerUI', GenerateSwaggerUI) {
	dependsOn 'openapi3'
	doFirst {
		def swaggerUIFile = file("${openapi3.outputDirectory}/openapi3.yaml")

		def securitySchemesContent =  "  securitySchemes:\n" +  \
                                      "    bearerAuth:\n" +  \
                                      "      type: http\n" +  \
									  "      scheme: bearer\n"+  \
                                      "security:\n" +
				"  - bearerAuth: []  # Apply the security scheme here"

		swaggerUIFile.append securitySchemesContent
	}
	inputFile = file('openapi3/openapi3.yaml')
	outputDir = file("swagger-ui-watermelon")
	wipeOutputDir = true
}